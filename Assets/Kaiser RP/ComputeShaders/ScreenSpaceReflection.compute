#pragma kernel SSR

#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/SpaceTransforms.hlsl"
#include "Packages/com.unity.render-pipelines.universal/Shaders/Utils/Deferred.hlsl"

RWTexture2D<float4> _SSR_RT;
Texture2D<float3> _BlueNoiseTexture;

TEXTURE2D_X(_CameraDepthTexture);
TEXTURE2D_X_HALF(_GBuffer0);
TEXTURE2D_X_HALF(_GBuffer1);
TEXTURE2D_X_HALF(_GBuffer2);
SAMPLER(sampler_point_clamp);

float4 _BufferSize;

float3 GetWorldSpacePosition(half3 positionSS)
{
    float4 positionWS = mul(UNITY_MATRIX_I_VP, half4(positionSS, 1));
    return positionWS.xyz / positionWS.w;
}

float3 GetViewSpacePosition(half3 positionSS)
{
    float4 positionVS = mul(UNITY_MATRIX_I_P, half4(positionSS, 1));
    return positionVS.xyz / positionVS.w;
}

[numthreads(8,8,1)]
void SSR (uint3 id : SV_DispatchThreadID)
{
    // screen data
    float2 resolution = _BufferSize.xy;
    float2 invResolution = _BufferSize.zw;

    float2 uv = id.xy / resolution;
    // half4 gbuffer0 = SAMPLE_TEXTURE2D_X_LOD(_GBuffer0, sampler_point_clamp, uv, 0);
    // half4 gbuffer1 = SAMPLE_TEXTURE2D_X_LOD(_GBuffer1, sampler_point_clamp, uv, 0);
    // half4 gbuffer2 = SAMPLE_TEXTURE2D_X_LOD(_GBuffer2, sampler_point_clamp, uv, 0);

    // depth data
    float depth = SAMPLE_TEXTURE2D_X_LOD(_CameraDepthTexture, sampler_point_clamp, uv, 0).x; // raw depth value has UNITY_REVERSED_Z applied on most platforms.
    float eyeDepth = LinearEyeDepth(depth, _ZBufferParams);
    float linearDepth = Linear01Depth(depth, _ZBufferParams);
    
    // gbuffer data
    half3 normalWS = SAMPLE_TEXTURE2D_X_LOD(_GBuffer2, sampler_point_clamp, uv, 0).xyz;
    half roughness = 1.0 - SAMPLE_TEXTURE2D_X_LOD(_GBuffer2, sampler_point_clamp, uv, 0).w;

    half3 normalVS = TransformWorldToView(normalWS);

    float3 positionSS = float3(uv, linearDepth);
    float3 positionWS = GetWorldSpacePosition(positionSS);
    float3 positionVS = GetViewSpacePosition(positionSS);
    float3 viewDirWS = normalize(positionWS - GetCameraPositionWS());

    _SSR_RT[id.xy] = float4(positionWS, roughness);
}
