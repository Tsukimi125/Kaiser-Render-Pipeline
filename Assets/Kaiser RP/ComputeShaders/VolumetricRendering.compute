#pragma kernel VolumetricLight

#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
// #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/SpaceTransforms.hlsl"
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Shadows.hlsl"


RWTexture2D<float4> _Volumetric_RT;
Texture2D<float3> _BlueNoiseTexture;
Texture2D<float3> _SSR_NoiseTex;

TEXTURE2D_X(_CameraDepthTexture);
TEXTURE2D_X_HALF(_GBuffer0);
TEXTURE2D_X_HALF(_GBuffer1);
TEXTURE2D_X_HALF(_GBuffer2);
SAMPLER(sampler_point_clamp);

float4 _BufferSize;

int _VL_SampleCounts = 4;

float3 GetWorldSpacePosition(float2 uv, float depth)
{
    return ComputeWorldSpacePosition(uv, depth, UNITY_MATRIX_I_VP);
}

float3 GetViewSpacePosition(float2 uv, float depth)
{
    return ComputeViewSpacePosition(uv, depth, UNITY_MATRIX_I_P);
}

float GetMarchSize(float2 start, float2 end, float2 samplerPos)
{
    float2 dir = abs(end - start);
    return length(float2(min(dir.x, samplerPos.x), min(dir.y, samplerPos.y)));
}

[numthreads(8, 8, 1)]
void VolumetricLight(uint3 id : SV_DispatchThreadID)
{
    // screen data
    float2 resolution = _BufferSize.xy;
    float2 invResolution = _BufferSize.zw;

    float2 uv = id.xy / resolution;
    half4 gbuffer0 = SAMPLE_TEXTURE2D_X_LOD(_GBuffer0, sampler_point_clamp, uv, 0);
    half4 gbuffer1 = SAMPLE_TEXTURE2D_X_LOD(_GBuffer1, sampler_point_clamp, uv, 0);
    half4 gbuffer2 = SAMPLE_TEXTURE2D_X_LOD(_GBuffer2, sampler_point_clamp, uv, 0);


    // depth data
    float depth = SAMPLE_TEXTURE2D_X_LOD(_CameraDepthTexture, sampler_point_clamp, uv, 0).x; // raw depth value has UNITY_REVERSED_Z applied on most platforms.
    float eyeDepth = LinearEyeDepth(depth, _ZBufferParams);
    float linearDepth = Linear01Depth(depth, _ZBufferParams);
    
    // gbuffer data
    half3 normalWS = SAMPLE_TEXTURE2D_X_LOD(_GBuffer2, sampler_point_clamp, uv, 0).xyz;
    half roughness = 1.0 - SAMPLE_TEXTURE2D_X_LOD(_GBuffer2, sampler_point_clamp, uv, 0).w;

    half3 normalVS = TransformWorldToView(normalWS);

    float3 positionSS = float3(uv, depth);
    float3 positionWS = GetWorldSpacePosition(uv, depth);
    float3 positionVS = GetViewSpacePosition(uv, depth);
    float3 viewDirWS = normalize(positionWS - GetCameraPositionWS());

    float4 shadowCoord = TransformWorldToShadowCoord(positionWS);
    // float lightAttenuation = SampleScreenSpaceShadowmap(shadowCoord);


    _Volumetric_RT[id.xy] = float4(shadowCoord);
}

